#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


class TheTilesDivOne {
public:

int IT, n, m;
vector<int> was;
vector<int> yy;
vector<int> ff;
vector<int> mm;
vector< vector<int> > g;

void Add(int x, int y) {
//    cerr << x << " " << y << endl;
    yy.push_back(y);
    ff.push_back(1);
    mm.push_back(yy.size());
    g[x].push_back(yy.size() - 1);

    yy.push_back(x);
    ff.push_back(0);
    mm.push_back(yy.size() - 2);
    g[y].push_back(yy.size() - 1);
}

bool dfs(int x, int T) {
    if (x == T) return true;
    if (was[x] == IT) return false;
    was[x] = IT;
    for (size_t i = 0; i < g[x].size(); ++i) {
        if (ff[ g[x][i] ] && dfs(yy[ g[x][i] ], T)) {
//            if (x & 1) {
//                cerr << (((x - 1)/2) / m) << "," << (((x - 1)/2) % m) << " ";
//            }
            --ff[g[x][i]];
            ++ff[mm[g[x][i]]];
            return true;
        }
    }
    return false;
}


	int find(vector <string> board) {
	    #define V1(x, y) ((((x)*m)+(y))*2+1)
	    #define V2(x, y) ((((x)*m)+(y))*2+2)
	
		yy.clear();
		ff.clear();
		g.clear();
		mm.clear();
		was.clear();
		IT = 0;
	    n = board.size(), m = board[0].size();
	    int S = 0, T = V2(n - 1, m - 1) + 1;
	    g.resize(T + 1);
	
	    for (int i = 0; i < n; ++i) {
	        for (int j = 0; j < m; ++j) {
	            if (board[i][j] == 'X') continue;
	
	            if ((i + j) & 1) {
	                if ( j & 1 ) {
	                    Add( S , V1(i, j) );
	                    Add( V1(i, j), V2(i, j) );
	                    if (i > 0)
	                        Add( V2(i, j) , V1(i - 1, j) );
	                    if (i < n - 1)
	                        Add( V2(i, j) , V1(i + 1, j) );
	                    if (j > 0)
	                        Add( V2(i, j) , V1(i, j - 1) );
	                    if (j < m - 1)
	                        Add( V2(i, j) , V1(i, j + 1) );
	                } else {
	                    Add( V1(i, j), V2(i, j) );                    
	                    Add( V2(i, j), T );
	                    if (i > 0)
	                        Add( V2(i - 1, j), V1(i, j) );
	                    if (i < n - 1)
	                        Add( V2(i + 1, j), V1(i, j) );
	                    if (j > 0)
	                        Add( V2(i, j - 1), V1(i, j) );
	                    if (j < m - 1)
	                        Add( V2(i, j + 1), V1(i, j) );
	                }
	
	            } else {
	                Add( V1(i, j) , V2(i, j) );
	            }
	        }
	    }
	
	    was.resize(T + 1);
	    IT = 1;
	    while (dfs(S, T)) {
//            cerr << endl;
	        ++IT;
	    }
	
		return IT - 1;		
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	TheTilesDivOne *obj;
	int answer;
	obj = new TheTilesDivOne();
	clock_t startTime = clock();
	answer = obj->find(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	int p1;
	
	{
	// ----- test 0 -----
	string t0[] = {".X...X.X.X...X.X.X.X.....X...X.X.X.......",
                   "....X.....X.....X.....X.....X.....X.X.X..",
                   ".X.X.......X...X...X.X.X.X.X...X.....X.X.",
                   "..X.....X.X...X.X.X...X.X...X.X...X.X.X.X"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 13;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!

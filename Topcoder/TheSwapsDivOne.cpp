#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


class TheSwapsDivOne {
public:
	typedef vector<vector<double> > matr;

	void Mul(matr& C, matr& A, matr& B) {
		for (int i = 0; i < n; ++i)
			for (int j = 0; j < n; ++j) {
				C[i][j] = 0;
				for (int k = 0; k < n; ++k) C[i][j] += A[i][k] * B[k][j];
			}			
	}

	void Pow(matr& C, matr& A, int k) {
		matr D(n, vector<double>(n));
		C = matr(n, vector<double>(n));
		for (int i = 0; i < n; ++i) C[i][i] = 1;
		
		while (k > 0) {
			if (k & 1) {
				Mul(D, C, A);
				C = D;
			}
			Mul(D, A, A);
			A = D;
			k >>= 1;
		}
	}

	int n;
	
	double find(vector <string> sequence, int k) {
		string s = "";
	
		for (int i= 0; i < sequence.size(); ++i) s += sequence[i];
		n = s.length();
		
		int AP = (n * (n - 1)) / 2;
		double p1 = 1. - double(n - 1) / AP;
		double p2 = 1. / AP;
		double P1 = p1;
		double P2 = p2;
		for (int i = 1; i < k; ++i) {
			double np1 = p1 * P1 + p2 * P2 * (n - 1);
			double np2 = P1 * p2 + P2 * p1 + (n - 2) * p2 * P2;
			p1 = np1;
			p2 = np2;
//			cerr << p1 << " " << p2 << endl;
		}
		
//		matr C;
//		matr A = matr(n, vector<double>(n));
//		for (int i =0 ; i < n; ++i) for (int j = 0; j < n; ++j)
//			if (i == j) A[i][j] = 1. - double(n - 1) / AP; else A[i][j] = 1. / AP;
//		Pow(C, A, k);
		
		
		double sum = 0;
		for (int i = 0; i < n; ++i) {
			for (int j = 0; j < n; ++j) {
	//			cerr << C[i][j] << " ";
				if (i == j)
					sum += (s[i] - 48) * p1 * (n - j) * (j + 1);else
					sum += (s[i] - 48) * p2 * (n - j) * (j + 1);
            }
  //          cerr << endl;
        }
		return sum / (n * (n + 1) / 2);
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <string> p0, int p1, bool hasAnswer, double p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}" << "," << p1;
	cout << "]" << endl;
	TheSwapsDivOne *obj;
	double answer;
	obj = new TheSwapsDivOne();
	clock_t startTime = clock();
	answer = obj->find(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = fabs(p2 - answer) <= 1e-9 * max(1.0, fabs(p2));
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	int p1;
	double p2;
	
	{
	// ----- test 0 -----
	string t0[] = {"4","77"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 1;
	p2 = 10.0;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {"4","77"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 47;
	p2 = 10.0;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {"1","1","1","1","1","1","1"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 1000000;
	p2 = 3.0;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	string t0[] = {"572685085149095989026478064633266980348504469","19720257361","9","69"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 7;
	p2 = 98.3238536775161;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!

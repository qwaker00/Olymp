#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <memory.h>

using namespace std;

typedef long long LL;

class Incubator {
public:
	int maxans;
	int d[55][55];
	int d2[55][55];
	LL m[55];
	int ed[66666], w[55];
	int nn, IT;
	const static int MAXIT = 2000000;

	int Ed(LL x) {
		if (x > (1 << 16)) return Ed(x & 0xFFFF) + Ed((x >> 16) &0xFFFF) + Ed((x >> 32) &0xFFFF) + Ed((x >> 48) &0xFFFF);
		return ed[x];
	}

	void go(int x, LL msk, LL tk) {
		if  (++IT > MAXIT) return;
		
		msk |= m[x];
		tk |= (1ll << x);
		if (tk & msk) return;
		
		if (Ed(tk) > maxans) {
			maxans = Ed(tk);
//			cerr << "+" << tk << endl;
		}
		for (int i = 0; i < nn; i++) if (d[x][i] == 0 && d[i][i] == 0 && (tk & (1ll << i)) == 0 && (msk & (1ll << i)) == 0) {
			go(i, msk, tk);
		}
	}

	int maxMagicalGirls(vector <string> love) {
		int n = love.size();
		maxans = 0;
		memset(d2, 0, sizeof(d2));
		for (int i = 0; i < n; i++) for (int j =0 ; j < n; j++) {
			if (love[i][j] == 'Y') {
				d[i][j] = 1;
			} else {
				d[i][j] = 0;
			}
		}
		for (int k = 0; k < n; k++)
			for (int i = 0; i < n; i++)
			for (int j = 0; j < n; j++) if (d[i][k] && d[k][j]){
				d[i][j] = 1;
			}
			
		memset(w, 0, sizeof(w));
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < n; j++) if (d[i][j]) {
				w[i]++;
			}
		}
		
		for (int i = 0; i < n; i++) {
			for (int j = i + 1; j < n; j++) if (w[i] > w[j]) {
//				cerr << w[i] << " " << w[j] << " " << i << " " << j << endl;
				swap(w[i], w[j]);
				for (int k = 0; k < n; k++) swap(d[i][k], d[j][k]);
				for (int k = 0; k < n; k++) swap(d[k][i], d[k][j]);
			}
		}
			
		IT = 0;
		ed[0] = 0;
		for (int i = 1; i < 66666; i++) ed[i] = ed[i&(i-1)] + 1;
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < n; j++) if (d[i][j]) m[i] |= (1ll << j);
		}
		nn = n;
		for (int i = 0; i < n; i++) if (d[i][i] == 0) go(i, 0, 0);
		return maxans;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	Incubator *obj;
	int answer;
	obj = new Incubator();
	clock_t startTime = clock();
	answer = obj->maxMagicalGirls(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	int p1;
	
	{
	// ----- test 0 -----
	string t0[] = {"NY","NN"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 1;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {"NYN","NNY","NNN"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 1;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {"NNYNN","NNYNN","NNNYY","NNNNN","NNNNN"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 2;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	string t0[] = {"NNNNN","NYNNN","NYNYN","YNYNN","NNNNN"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 2;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	string t0[] = {"NNNNN","NNNNN","NNNNN","NNNNN","NNNNN"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 5;
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	string t0[] = {"NNYNNNNN","NNNYNNNN","NNNNYNNN","NNYNNNNN","NNNNNYYN","NNNYNNNY","NNNNNNNN","NNNNNNNN"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 2;
	all_right = KawigiEdit_RunTest(5, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 6 -----
	string t0[] = {"Y"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 0;
	all_right = KawigiEdit_RunTest(6, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!

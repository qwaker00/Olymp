#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


class TheNumberGame {
public:
	map< pair<int, int>, int> state;
	
	int Reverse(int x) {
		int y = 0;
		while (x) {
			y = y * 10 + x % 10;
			x /= 10;
		}
		return y;
	}
	
	int Win(int A, int B) {
		int& q = state[make_pair(A, B)];
		if (q) return q - 1;
		
		q = (int)1e9;
		if (A == B)	return (q = 1) - 1;
		if (A >= 10 && A / 10 == B) return (q = 2) - 1;
		if (Reverse(A) == B) return (q = 2) - 1;
						
		if (A >= 10) {
			int qw = Win(A / 10, Reverse(B)) + 2;			
			if (B >= 10)
				qw = max(qw, Win(A / 10, B / 10) + 2);
			q = min(q, qw);				
		}
		int qw = Win(Reverse(A), Reverse(B)) + 2;			
		if (B >= 10)
			qw = max(qw, Win(Reverse(A), B / 10) + 2);
		q = min(q, qw);
		
		return (q = q + 1) - 1;
	}

	string determineOutcome(int A, int B) {
		return Win(A, B) <= 1000 ? "Manao wins" : "Manao loses";
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, int p0, int p1, bool hasAnswer, string p2) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1;
	cout << "]" << endl;
	TheNumberGame *obj;
	string answer;
	obj = new TheNumberGame();
	clock_t startTime = clock();
	answer = obj->determineOutcome(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p2 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	int p1;
	string p2;
	
	{
	// ----- test 0 -----
	p0 = 45;
	p1 = 4;
	p2 = "Manao wins";
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 45;
	p1 = 5;
	p2 = "Manao wins";
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 99;
	p1 = 123;
	p2 = "Manao loses";
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 2356236;
	p1 = 5666;
	p2 = "Manao loses";
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = 12;
	p1 = 21;
	p2 = "Manao wins";
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
